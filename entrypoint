#!/bin/bash
set -euo pipefail

[ -v BASE_DIR ] || BASE_DIR="/app"
[ -v CONF_DIR ] || CONF_DIR="${BASE_DIR}/conf"
[ -v INIT_DIR ] || INIT_DIR="${BASE_DIR}/init"
[ -v CONFIG_ZIP ] || CONFIG_ZIP="${BASE_DIR}/.arkcase.zip"
[ -v VERSION_MARKER ] || VERSION_MARKER="${CONF_DIR}/.version"
[ -v EXTRACT_MARKER ] || EXTRACT_MARKER="${CONF_DIR}/acm/acm-config-server-repo/arkcase.yaml"
EXTRACT_TARGET="$(mktemp -d -p "${CONF_DIR}")"
COMPLETE="false"
FILES=()

say() {
	echo -e "$(date -u -Isec): ${@}"
}

fail() {
	say "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

to_boolean() {
	local RESULT="false"
	case "${1,,}" in
		true | t | yes | y | 1 | on | enable | enabled | active ) RESULT="true" ;;
	esac
	echo "${RESULT}"
	return 0
}

list_files() {
	local DIR="."
	[ ${#} -gt 0 ] && DIR="${1}"
	DIR="$(readlink -f "${DIR}")"
	if [ -d "${DIR}" ] ; then
		find "${DIR}" -mindepth 1 -maxdepth 1 | sort | sed -e "s:^${DIR}/::g"
	else
		echo "${DIR}"
	fi
}

cleanup() {
	rm -rf "${EXTRACT_TARGET}" &>/dev/null
	if "${COMPLETE}" ; then
		say "Initialization complete."
	else
		say "Initialization was not complete. Cleaning out the extracted files"
		# Make sure the marker file is gone
		rm -rf "${VERSION_MARKER}" || true
		# Just in case ...
		for f in "${FILES[@]}" ; do
			f="${CONF_DIR}/${f}"
			[ -e "${f}" ] || continue
			rm -rf "${f}" || true
		done
	fi
}

trap cleanup exit

#
# Step one: extract the configurations
#

if [ -e "${EXTRACT_MARKER}" ] ; then
	DATE=""
	EXISTING=""
	EXISTING_LOADED="false"
	if [ -e "${VERSION_MARKER}" ] ; then
		read DATE EXISTING REST < <(grep -v '^[[:space:]]*#' "${VERSION_MARKER}" | grep -v '^[[:space:]]*$' | tail -1)
		EXISTING_LOADED="true"
	fi
	if [ -v VER ] ; then
		if "${EXISTING_LOADED}" && [ "${EXISTING}" == "${VER}" ] ; then
			COMPLETE="true"
			say "The configuration appears to already be deployed (${VER})."
			exit 0
		fi
		say "Version change detected: existing = [${EXISTING:-"<none>"}], incoming = [${VER}]"
	else
		say "WARNING: The VER environment variable must be present in order to detect upgrades"
		say "The configuration appears to already be deployed (${EXISTING})."
		exit 0
	fi
else
	say "The configuration doesn't appear to be deployed, the marker path [${EXTRACT_MARKER}] is missing"
fi


[ -d "${CONF_DIR}" ] || fail "Failed to CD into the configuration mount point [${CONF_DIR}]"

# It's OK to do this, as CONF_DIR is meant to be a volume in this container
unzip -o -d "${CONF_DIR}" "${CONFIG_ZIP}"

#
# If REALM_FIX is set, we edit the excel files accordingly
#

if [ -v REALM_FIX ] && [[ "${REALM_FIX}" =~ ^[^=]+=[^=]+$ ]] ; then
	# REALM_FIX is set as "OLD_VALUE,NEW_VALUE", and three versions are created:
	# literal (i.e. as-stated), lowercased, and uppercased

	readarray -t -d '=' FIXES < <(echo -n "${REALM_FIX}")

	[ ${#FIXES[@]} -eq 2 ] || fail "The format for REALM_FIX is incorrect - must be 'OLD,NEW': [${REALM_FIX}]"

	OLD="@${FIXES[0]}"
	NEW="@${FIXES[1]}"

	if [ "${OLD}" != "${NEW}" ] ; then
		SUBS=("${OLD}" "${NEW}")
		# If applicable, do the lowercased one
		[ "${OLD,,}" != "${OLD}" ] && SUBS+=("${OLD,,}" "${NEW,,}")
		# If applicable, do the uppercased one
		[ "${OLD^^}" != "${OLD}" ] && SUBS+=("${OLD^^}" "${NEW^^}")

		while read f ; do
			/fixExcel "${f}" "${SUBS[@]}" || fail "Failed to apply the realm fix for [${f}]"
		done < <(find "${CONF_DIR}" -type f -name '*.xlsx' | sort)
	fi
elif [ -v REALM_FIX ] ; then
	fail "The format for REALM_FIX is incorrect - must be 'OLD=NEW': [${REALM_FIX}]"
else
	say "WARNING: No REALM_FIX found, will not modify the Excel files"
fi

#
# Apply customizations and reconfigurations
#
if [ ! -d "${INIT_DIR}" ] ; then
	COMPLETE="true"
	say "No initialization to perform, exiting"
	exit 0
fi

cd "${INIT_DIR}"
while read f ; do
	[ -f "${f}" ] || continue
	[ -r "${f}" ] || continue
	[ -x "${f}" ] || continue

	say "Executing initialization script [${f}]..."
	RC=0
	OUT="$("${f}")" || RC=${?}
	[ ${RC} -eq 0 ] || fail "\tInitialization script [${f}] failed (rc=${RC}):\n${OUT}"
done < <(list_files)

say "Initialization scripts complete"

say "Deploying the files to their final location"
cd "${EXTRACT_TARGET}"
readarray -t FILES < <(list_files)
# We do it like this so we can run cleanup later if we have to
for f in "${FILES[@]}" ; do
	mv -vf "${f}" "${CONF_DIR}"
done

[ -v VER ] || VER="(unspecified)"
echo -e "$(date -u -Ins) ${VER}" &>> "${VERSION_MARKER}"
say "Configuration Initialization Complete"
COMPLETE="true"
exit 0
